<?php 

$reff_mag = $_GET['reff_mag'];
$reff_mag_power = $_GET['reff_mag_power'];

$reff_phase = $_GET['reff_phase'];
$reff_phase_power = $_GET['reff_phase_power'];


$voltage_mag = $_GET['voltage_mag'];
$voltage_mag_power = $_GET['voltage_mag_power'];

$resistance = $_GET["resistance"];
$resistance_power = $_GET["resistance_power"];

$alpha = $_GET['alpha'];
$alpha_power = $_GET['alpha_power'];
$beta = $_GET['beta'];
$beta_power = $_GET['beta_power'];


$resistance_val = $resistance * pow(10, $resistance_power);
$beta_val = $beta * pow(10, $beta_power);
$alpha_val = $alpha * pow(10, $alpha_power);
$reff_mag_val = $reff_mag * pow(10, $reff_mag_power);
$reff_phase_val = $reff_phase * pow(10, $reff_phase_power);

$voltage_mag_val = $voltage_mag * pow(10, $voltage_mag_power);

$cmd =
    "cd ../algo && ./tx_algo_5 " .
	number_format($alpha_val, 10, ".", "")." " .
    number_format($beta_val, 10, ".", ""). " ".
    number_format($resistance_val, 10, ".", "") ." ".
    number_format($reff_mag_val, 10, ".", "") ." ".
    number_format($reff_phase_val, 10, ".", "") ." ".
    number_format($voltage_mag_val, 10, ".", "");

$result = json_decode(shell_exec($cmd));

$V = $result->V;
$I = $result->I;
$V = json_encode($V);
$I = json_encode($I);
function displayData($data)
{
    echo "<h2>Transmission Line Parameters</h2>";

    // Display Inputs
    echo "<h3>Inputs</h3>";
    echo "<ul>";
    echo "<li><strong>V<sub>0</sub>:</strong> {$data->inputs->V0}</li>";
    echo "<li><strong>Voltage Reflection Magnitude:</strong> {$data->inputs->volRef_mag}</li>";
    echo "<li><strong>Voltage Reflection Phase (degrees):</strong> {$data->inputs->volRef_phase}</li>";
    echo "<li><strong>Alpha:</strong> {$data->inputs->alpha}</li>";
    echo "<li><strong>Beta:</strong> {$data->inputs->beta}</li>";
    echo "<li><strong>Z<sub>0</sub> (Characteristic Impedance):</strong> {$data->inputs->Z_0}</li>";
    echo "<li><strong>λ (Lambda):</strong> {$data->inputs->lamda}</li>";
    echo "</ul>";

    // Display Outputs
    echo "<h3>Outputs</h3>";
    echo "<ul>";
    echo "<li><strong>λ (Lambda):</strong> {$data->outputs->lamda}</li>";
    echo "<li><strong>V<sub>max</sub>:</strong> {$data->outputs->Vmax}</li>";
    echo "<li><strong>V<sub>min</sub>:</strong> {$data->outputs->Vmin}</li>";
    echo "<li><strong>VSWR:</strong> {$data->outputs->VSWR}</li>";
    echo "</ul>";

}
displayData($result);
?>




<h2>d vs V(d) Plot</h2>
<canvas id="VoltageCanvas" width="800" height="400"></canvas>

<canvas id="currentCanvas" width="800" height="400"></canvas>


<canvas id="myCanvas" width="800" height="400"></canvas>

<script>
function plotDataOnCanvas(canvasId, datasets, xLabel = 'x', yLabel = 'y') {
    const canvas = document.getElementById(canvasId);
    if (!canvas || !canvas.getContext) {
        console.error("Canvas not found or unsupported.");
        return;
    }

    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    // Margins
    const margin = 50;

    // Extract X and Y
    const xs = datasets.map(p => p[0]);
    const ys = datasets.map(p => p[1]);

    // Get min and max
    const xMin = Math.min(...xs);
    const xMax = Math.max(...xs);
    const yMin = Math.min(...ys);
    const yMax = Math.max(...ys);

    // Scale functions
    const scaleX = x => margin + ((x - xMin) / (xMax - xMin)) * (width - 2 * margin);
    const scaleY = y => height - margin - ((y - yMin) / (yMax - yMin)) * (height - 2 * margin);

    // Draw axes
    ctx.beginPath();
    ctx.moveTo(margin, margin);
    ctx.lineTo(margin, height - margin); // y-axis
    ctx.lineTo(width - margin, height - margin); // x-axis
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 2;
    ctx.stroke();

    // Arrow heads
    ctx.font = "16px sans-serif";
    ctx.fillText("→", width - margin + 5, height - margin + 5); // x-arrow
    ctx.fillText("↑", margin - 15, margin); // y-arrow

    // Axis labels
    ctx.fillText(xLabel, width - margin + 20, height - margin + 5);
    ctx.fillText(yLabel, margin - 30, margin - 10);

    // Ticks and labels (every ~10 steps)
    const steps = 10;
    const xStep = (xMax - xMin) / steps;
    const yStep = (yMax - yMin) / steps;

    ctx.fillStyle = "#000";
    ctx.font = "12px sans-serif";

    for (let i = 0; i <= steps; i++) {
        // X axis ticks
        const xVal = xMin + i * xStep;
        const x = scaleX(xVal);
        ctx.beginPath();
        ctx.moveTo(x, height - margin - 5);
        ctx.lineTo(x, height - margin + 5);
        ctx.stroke();
        ctx.fillText(xVal.toFixed(1), x - 10, height - margin + 20);

        // Y axis ticks
        const yVal = yMin + i * yStep;
        const y = scaleY(yVal);
        ctx.beginPath();
        ctx.moveTo(margin - 5, y);
        ctx.lineTo(margin + 5, y);
        ctx.stroke();
        ctx.fillText(yVal.toFixed(2), margin - 40, y + 5);
    }

    // Draw data line
    ctx.beginPath();
    datasets.forEach(([x, y], idx) => {
        const px = scaleX(x);
        const py = scaleY(y);
        if (idx === 0) {
            ctx.moveTo(px, py);
        } else {
            ctx.lineTo(px, py);
        }
    });
    ctx.strokeStyle = "#007bff";
    ctx.lineWidth = 2;
    ctx.stroke();
}
const rawData = <?php echo "`".$V."`"?>;
    const voltageData = JSON.parse(rawData);

plotDataOnCanvas("voltageCanvas", voltageData, "d","V(d)");
</script>

<?php
    // Display V
require "../web/algo5.php";
    echo "<h3>Voltage (V) Samples</h3>";
    echo "<table border='1' cellpadding='5' cellspacing='0'>";
    echo "<tr><th>x</th><th>V(x)</th></tr>";
    foreach ($result->V as $pair) {
        echo "<tr><td>{$pair[0]}</td><td>{$pair[1]}</td></tr>";
    }
    echo "</table>";

    // Display I
    echo "<h3>Current (I) Samples</h3>";
    echo "<table border='1' cellpadding='5' cellspacing='0'>";
    echo "<tr><th>x</th><th>I(x)</th></tr>";
    foreach ($result->I as $pair) {
        echo "<tr><td>{$pair[0]}</td><td>{$pair[1]}</td></tr>";
    }
    echo "</table>";

?>
